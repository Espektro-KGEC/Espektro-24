/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 untitled.gltf 
*/

import React, { useEffect, useLayoutEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame, useThree } from 'react-three-fiber';
import { useControls } from "leva";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";
	


const Robot = (props) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/untitled.gltf');
  const { actions,names } = useAnimations(animations, group);
  console.log(names);
  const tl = gsap.timeline();
  const {camera,scene} =useThree();


//   //----- used for getting the position for the shoes ----
// 	const { cameraPosition, scenePosition, sceneRotation } = useControls({
// 		cameraPosition: {
// 			value: {
// 				x: 3.00,
// 				y: 0.75,
// 				z: -0.20,
// 			},
// 			step: 0.05,
// 		},
// 		scenePosition: {
// 			value: { x: 0.25, y: -0.90, z: -2.35 },
// 			step: 0.05,
// 		},

// 		sceneRotation: {
// 			value: { x: -0.57, y: -2.04, z: -0.28 },
// 			step: 0.01,
// 		},
// 	});


  useLayoutEffect(() => {
		new ScrollTrigger({});
		// component About.tsx
		tl.to(camera.position, {
			x: 3.00,
			y: 0.75,
			z: -0.20,
			scrollTrigger: {
				trigger: ".second-section",
				start: "top bottom",
				end: "top top",
				scrub: true,
				immediateRender: false,
			},
		})
			.to(scene.position, {
				x: 0.25,
				y:-0.90,
				z:-2.35,
				scrollTrigger: {
					trigger: ".second-section",
					start: "top bottom",
					end: "top top",
					scrub: true,
					immediateRender: false,
				},
			})

			.to(scene.rotation, {
				x: -0.57,
				y: -2.04,
				z: -0.28,
				scrollTrigger: {
					trigger: ".second-section",
					start: "top bottom",
					end: "top top",
					scrub: true,
					immediateRender: false,
				},
			})



			// component - BuyNow.tsx
			.to(camera.position, {
				x: 2.55,
				y: 0.70,
				z: -0.20,
				scrollTrigger: {
					trigger: ".third-section",
					start: "top bottom",
					end: "top top",
					scrub: true,
					immediateRender: false,
				},
			})
			.to(scene.position, {
				x: 2.90,
				y: -0.70,
				z: -2.35,
				scrollTrigger: {
					trigger: ".third-section",
					start: "top bottom",
					end: "top top",
					scrub: true,
					immediateRender: false,
				},
			})
			.to(scene.rotation, {
				x: -0.51,
				y: -3.67,
				z: -0.17,
				scrollTrigger: {
					trigger: ".third-section",
					start: "top bottom",
					end: "top top",
					scrub: true,
					immediateRender: false,
				},
			})

			.to(camera.position, {
				x: 1.00,
				y: 0.25,
				z: -0.20,
				scrollTrigger: {
					trigger: ".fourth-section",
					start: "top bottom",
					end: "top top",
					scrub: true,
					immediateRender: false,
				},
			})
				.to(scene.position, {
					x: 0.25,
					y:-0.90,
					z:-2.05,
					scrollTrigger: {
						trigger: ".fourth-section",
						start: "top bottom",
						end: "top top",
						scrub: true,
						immediateRender: false,
					},
				})
	
				.to(scene.rotation, {
					x: -0.62,
					y: -2.88,
					z: -0.26,
					scrollTrigger: {
						trigger: ".fourth-section",
						start: "top bottom",
						end: "top top",
						scrub: true,
						immediateRender: false,
					},
				});
	
			
	}, []);

//   useFrame(() => {
// 		camera.position.x = cameraPosition.x;
// 		camera.position.y = cameraPosition.y;
// 		camera.position.z = cameraPosition.z;
// 		scene.position.x = scenePosition.x;
// 		scene.position.y = scenePosition.y;
// 		scene.position.z = scenePosition.z;
// 		scene.rotation.x = sceneRotation.x;
// 		scene.rotation.y = sceneRotation.y;
// 		scene.rotation.z = sceneRotation.z;
// 	});

  useEffect( ()=>{actions[names[0]].reset().fadeIn(0).play();},[]);
    // Start the first animation when the component
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.002}>
          <group name="DroneFBX" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="Object_4">
                  <primitive object={nodes._rootJoint} />
                  <group name="droid" rotation={[-Math.PI / 2, 0, 0]} />
                  <group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
                  <skinnedMesh name="Object_7" geometry={nodes.Object_7.geometry} material={materials.Robot} skeleton={nodes.Object_7.skeleton} />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}
export default Robot;

useGLTF.preload('/untitled.gltf')
